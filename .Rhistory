setwd(G:\My Drive\RNAseq\Carli_SN+Cytokines)
setwd(G:/My Drive/RNAseq/Carli_SN+Cytokines)
setwd("G:/My Drive/RNAseq/Carli_SN+Cytokines")
setwd("G:/My Drive/RNAseq/Carli_SN+Cytokines/Analysis Carli")
# Replace 'your_data.xlsx' and 'your_metadata.xlsx' with your actual file names
metadata <- read.csv("Metadata.csv")
# Read epithelial counts from Excel file
CytokineSN <- read.csv("Rawcunts.csv")
# Read epithelial counts from Excel file
CytokineSN <- read.csv("Rawcounts.csv")
# Convert the tibble to a data frame
FilteredNA <- as.data.frame(FilteredNA)
# Identify and remove duplicates
duplicated_genes <- duplicated(week1_counts$Gene.symbol)
week1_counts <- week1_counts[!duplicated_genes, ]
View(CytokineSN)
# Create DESeqDataSet
ddsoverall <- DESeqDataSetFromMatrix(countData = Data.Carli.only,
colData = Metadata,
design = ~ Experiment + Treatment + Experiment:Treatment)
library(DESeq2)
library(readxl)
# Create DESeqDataSet
ddsoverall <- DESeqDataSetFromMatrix(countData = Data.Carli.only,
colData = Metadata,
design = ~ Experiment + Treatment + Experiment:Treatment)
# Create DESeqDataSet
ddsoverall <- DESeqDataSetFromMatrix(countData = CytokineSN,
colData = Metadata,
design = ~ Experiment + Treatment + Experiment:Treatment)
# Create DESeqDataSet
ddsoverall <- DESeqDataSetFromMatrix(countData = CytokineSN,
colData = metadata,
design = ~ Experiment + Treatment + Experiment:Treatment)
View(metadata)
# Convert the tibble to a data frame
metadata <- as.data.frame(metadata)
# Set the first column as row names
rownames(metadata) <- metadata[, 1]
View(metadata)
# Create DESeqDataSet
ddsoverall <- DESeqDataSetFromMatrix(countData = CytokineSN,
colData = metadata,
design = ~ Experiment + Treatment)
View(metadata)
View(CytokineSN)
# Read epithelial counts from Excel file
CytokineSN <- read.csv("Rawcounts.csv", colnames = 1)
View(CytokineSN)
View(metadata)
# Convert the tibble to a data frame
metadata <- as.data.frame(CytokineSN)
# Set the first column as row names
rownames(metadata) <- CytokineSN[, 1]
View(CytokineSN)
# Create DESeqDataSet
ddsoverall <- DESeqDataSetFromMatrix(countData = CytokineSN,
colData = metadata,
design = ~ Experiment + Treatment)
colnames(CytokineSN) <- CytokineSN[1,]
View(CytokineSN)
# Read epithelial counts from Excel file
CytokineSN <- read.csv("Rawcounts.csv")
# Replace 'your_data.xlsx' and 'your_metadata.xlsx' with your actual file names
metadata <- read.csv("Metadata.csv")
View(CytokineSN)
# Read epithelial counts from Excel file
CytokineSN <- read.csv("Rawcounts.csv", row.names=1)
View(CytokineSN)
View(metadata)
# Convert the tibble to a data frame
metadata <- as.data.frame(metadata)
# Set the first column as row names
rownames(metadata) <- metadata[, 1]
View(metadata)
# Create DESeqDataSet
ddsoverall <- DESeqDataSetFromMatrix(countData = CytokineSN,
colData = metadata,
design = ~ Experiment + Treatment)
# Run DESeq analysis
ddsoverall<- DESeq(ddsoverall)
# Assuming your DESeqDataSet object is named 'dds'
# Subset the DESeqDataSet object for only the control and TGFb groups
dds_subset <- dds[, dds$treatment %in% c("CTR", "TGF")]
# Assuming your DESeqDataSet object is named 'dds'
# Subset the DESeqDataSet object for only the control and TGFb groups
dds_subset <- dds[, ddsoverall$Treatment %in% c("CTR", "TGF")]
# Assuming your DESeqDataSet object is named 'dds'
# Subset the DESeqDataSet object for only the control and TGFb groups
dds_subset <- ddsoverall[, ddsoverall$Treatment %in% c("CTR", "TGF")]
View(dds_subset)
# Perform PCA
rld <- rlog(dds_subset, blind = FALSE)
pcaData <- plotPCA(rld, intgroup = "treatment", returnData = TRUE)
# Generate PCA plot
ggplot(pcaData, aes(PC1, PC2, color = treatment)) +
geom_point(size = 3) +
xlab(paste0("PC1: ", percentVar[1], "% variance")) +
ylab(paste0("PC2: ", percentVar[2], "% variance")) +
theme_minimal() +
ggtitle("PCA Plot of Control and TGFb Treatment Groups")
library(ggplot)
library(ggplot2)
# Generate PCA plot
ggplot(pcaData, aes(PC1, PC2, color = treatment)) +
geom_point(size = 3) +
xlab(paste0("PC1: ", percentVar[1], "% variance")) +
ylab(paste0("PC2: ", percentVar[2], "% variance")) +
theme_minimal() +
ggtitle("PCA Plot of Control and TGFb Treatment Groups")
pcaData <- plotPCA(rld, intgroup = "treatment", returnData = TRUE)
pcaData <- plotPCA(rld, intgroup = "Treatment", returnData = TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))
# Generate PCA plot
ggplot(pcaData, aes(PC1, PC2, color = treatment)) +
geom_point(size = 3) +
xlab(paste0("PC1: ", percentVar[1], "% variance")) +
ylab(paste0("PC2: ", percentVar[2], "% variance")) +
theme_minimal() +
ggtitle("PCA Plot of Control and TGFb Treatment Groups")
View(dds_subset)
# Generate PCA plot
ggplot(pcaData, aes(PC1, PC2, color = Treatment)) +
geom_point(size = 3) +
xlab(paste0("PC1: ", percentVar[1], "% variance")) +
ylab(paste0("PC2: ", percentVar[2], "% variance")) +
theme_minimal() +
ggtitle("PCA Plot of Control and TGFb Treatment Groups")
# Generate PCA plot
ggplot(pcaData, aes(PC1, PC3, color = Treatment)) +
geom_point(size = 3) +
xlab(paste0("PC1: ", percentVar[1], "% variance")) +
ylab(paste0("PC2: ", percentVar[2], "% variance")) +
theme_minimal() +
ggtitle("PCA Plot of Control and TGFb Treatment Groups")
# Generate PCA plot
ggplot(pcaData, aes(PC1, PC2, color = Treatment)) +
geom_point(size = 3) +
xlab(paste0("PC1: ", percentVar[1], "% variance")) +
ylab(paste0("PC2: ", percentVar[2], "% variance")) +
theme_minimal() +
ggtitle("PCA Plot of Control and TGFb Treatment Groups")
## calculate the variance for each gene
rv <- rowVars(assay(vsd))
# Identify columns containing 'SN20'
cols_to_remove <- grep('SN20', colnames(CytokineSN))
print("Columns to remove:")
View(CytokineSN)
# Remove columns containing 'SN20'
CytokineSN <- CytokineSN[, -cols_to_remove]
View(CytokineSN)
# Identify columns containing 'SN20'
rows_to_remove <- grep('SN20', rownames(Metadata))
# Identify columns containing 'SN20'
rows_to_remove <- grep('SN20', rownames(metadata))
print(rows_to_remove)
# Remove columns containing 'SN20'
metadata <- metadata[, -rows_to_remove]
# Create DESeqDataSet
ddsoverall <- DESeqDataSetFromMatrix(countData = CytokineSN,
colData = metadata,
design = ~ Experiment + Treatment)
View(metadata)
# Replace 'your_data.xlsx' and 'your_metadata.xlsx' with your actual file names
metadata <- read.csv("Metadata.csv")
# Convert the tibble to a data frame
metadata <- as.data.frame(metadata)
# Set the first column as row names
rownames(metadata) <- metadata[, 1]
View(metadata)
View(metadata)
# Identify columns containing 'SN20'
rows_to_remove <- grep('SN20', rownames(metadata))
# Remove columns containing 'SN20'
metadata <- metadata[-rows_to_remove,]
# Create DESeqDataSet
ddsoverall <- DESeqDataSetFromMatrix(countData = CytokineSN,
colData = metadata,
design = ~ Experiment + Treatment)
# Run DESeq analysis
ddsoverall<- DESeq(ddsoverall)
library("DESeq2")
library("edgeR")
library("tidyverse")
library("ggrepel")
library("ggplot2")
library("ggfortify")
library("RColorBrewer")
library("pheatmap")
library("reshape")
library(openxlsx)
#library("annotables") #genesymbols aan ID matchen
# load the metadata and rowcount.csv file
setwd("G:/My Drive/RNAseq/Carli_SN+Cytokines/Analysis Carli")
#counts <- read.csv(file.path("Rawcounts.csv"))
metadata <- read.csv("Metadata.csv", row.names=1)
counts <- read.csv("analyse/Rawcounts.csv", row.names=1)
# load the metadata and rowcount.csv file
setwd("G:/My Drive/RNAseq/Carli_SN+Cytokines/Analysis Carli")
metadata <- read.csv("Metadata.csv", row.names=1)
counts <- read.csv("analyse/Rawcounts.csv", row.names=1)
counts <- read.csv("Rawcounts.csv", row.names=1)
View(counts)
View(metadata)
# check if order of samples is the same in metadata and count table
rownames(metadata)
colnames(counts)
all(rownames(metadata) == colnames(counts))
# remember that DESeq2 will output results for the last term in the formula
ddsoverall <- DESeqDataSetFromMatrix(countData = counts,
colData = metadata,
design = ~ Experiment + Treatment + Experiment:Treatment)
ddsoverall$Treatment <- factor(ddsoverall$Treatment, levels = c("CTR", "TGF", "IL6", "IL4IL13"))
#ddsoverall<- DESeq(ddsoverall)
# Now you can access results with the desired contrast name
#resultsNames(ddsoverall)
keep <- rowSums(counts(ddsoverall)) >= 10
ddsoverall <- ddsoverall[keep,]
ddsoverall <- estimateSizeFactors(ddsoverall)
ddsoverall <- DESeq(ddsoverall)
keep <- rowSums(counts(ddsoverall)) >= 10
ddsoverall <- ddsoverall[keep,]
ddsoverall <- estimateSizeFactors(ddsoverall)
ddsoverall <- DESeq(ddsoverall)
View(ddsoverall)
# remember that DESeq2 will output results for the last term in the formula
ddsoverall <- DESeqDataSetFromMatrix(countData = counts,
colData = metadata,
design = ~ Experiment + Treatment)
ddsoverall$Treatment <- factor(ddsoverall$Treatment, levels = c("CTR", "TGF", "IL6", "IL4IL13"))
keep <- rowSums(counts(ddsoverall)) >= 10
ddsoverall <- ddsoverall[keep,]
ddsoverall <- estimateSizeFactors(ddsoverall)
ddsoverall <- DESeq(ddsoverall)
# Run contrasts
resTGF <- results(ddsoverall, contrast = c("Treatment", "TGF", "CTR"))
resIL6 <- results(ddsoverall, contrast = c("Treatment", "IL6", "CTR"))
resIL4IL13 <- results(ddsoverall, contrast = c("Treatment", "IL4IL13", "CTR"))
# Generate data table of epithelial data
resoverall <- results(ddsoverall)
plotDispEsts(ddsoverall)
resultsNames(ddsoverall)
colData(ddsoverall)
normalized_counts <- counts(ddsoverall, normalized = TRUE)
log2_normalized_counts <- log2(normalized_counts + 1)  # Adding 1 to avoid log(0)
vsd_overall <- vst(ddsoverall, blind = TRUE)
vsd_TGF <- vst(resTGF, blind = TRUE)
# simple PCA
plotPCA(vsd_overall, intgroup = c("Experiment", "Treatment"))
plotPCA(vsd_overall, intgroup = "Treatment")
plotPCA(vsd_overall, intgroup = "Experiment")
View(counts)
View(metadata)
# Filter metadata to include only rows with treatment identifier "IL4IL13"
metadata_filtered <- metadata %>% filter(Treatment == "IL4IL13")
# Extract the row names (these will be the column names in rawcounts)
selected_columns <- rownames(metadata_filtered)
# Select the corresponding columns from rawcounts
rawcounts_filtered <- rawcounts %>% select(all_of(selected_columns))
# Select the corresponding columns from rawcounts
rawcounts_filtered <- counts %>% select(all_of(selected_columns))
View(rawcounts_filtered)
# Select the corresponding columns from rawcounts
counts <- counts %>% select(all_of(selected_columns))
View(counts)
# Filter metadata to include only rows with treatment identifier "IL4IL13"
metadata <- metadata %>% filter(Treatment == "IL4IL13")
View(metadata)
# Filter metadata to include only rows with treatment identifier "IL4IL13"
metadata <- metadata %>% filter((Treatment == "IL4IL13") | (Treatment == "BSA"))
View(metadata)
# Filter metadata to include only rows with treatment identifier "IL4IL13"
metadata <- metadata %>% filter((Treatment == "IL4IL13" or "BSA"))
# Filter metadata to include only rows with treatment identifier "IL4IL13"
metadata <- metadata %>% filter((Treatment == "IL4IL13", "BSA"))
# Filter metadata to include only rows with treatment identifier "IL4IL13"
metadata <- metadata %>% filter((Treatment == "IL4IL13"), Treatment == "BSA"))
# Filter metadata to include only rows with treatment identifier "IL4IL13"
metadata <- metadata %>% filter((Treatment == "IL4IL13"), (Treatment == "BSA"))
View(metadata)
metadata <- read.csv("Metadata.csv", row.names=1)
# Filter metadata to include only rows with treatment identifier "IL4IL13"
metadata <- metadata %>% filter((Treatment == "IL4IL13"), (Treatment == "BSA"))
View(metadata)
metadata <- read.csv("Metadata.csv", row.names=1)
# Filter metadata to include only rows with treatment identifier "IL4IL13"
metadata <- metadata %>% filter((Treatment == "IL4IL13") | (Treatment == "BSA"))
# Filter metadata to include only rows with treatment identifier "IL4IL13"
metadata <- metadata %>% filter((Treatment == "IL4IL13") & (Treatment == "BSA"))
metadata <- read.csv("Metadata.csv", row.names=1)
# Filter metadata to include only rows with treatment identifier "IL4IL13"
metadata <- metadata %>% filter((Treatment == "IL4IL13") & (Treatment == "BSA"))
metadata <- read.csv("Metadata.csv", row.names=1)
# Filter metadata to include only rows with treatment identifier "IL4IL13"
metadata <- metadata %>% filter(Treatment %in% "IL4IL13", "BSA")
# Filter metadata to include only rows with treatment identifier "IL4IL13"
metadata <- metadata %>% filter(Treatment %in% "CTR", IL4IL13")
# Filter metadata to include only rows with treatment identifier "IL4IL13"
metadata <- metadata %>% filter(Treatment %in% c("CTR", IL4IL13"))
# Filter metadata to include only rows with treatment identifier "IL4IL13"
metadata <- metadata %>% filter(Treatment %in% c("CTR", "IL4IL13"))
# Save the filtered metadata
write.csv(metadata, "path/to/Metadata_filtered_IL4IL13.csv")
# Save the filtered metadata
write.csv(metadata, "Metadata_filtered_IL4IL13.csv")
counts <- read.csv("Rawcounts.csv", row.names=1)
# Extract the row names (these will be the column names in rawcounts)
selected_columns <- rownames(metadata)
# Select the corresponding columns from rawcounts
counts <- counts %>% select(all_of(selected_columns))
# Save the filtered rawcounts data if needed
write.csv(counts, "Rawcounts_filtered_IL4IL13.csv")
# check if order of samples is the same in metadata and count table
rownames(metadata)
colnames(counts)
all(rownames(metadata) == colnames(counts))
# remember that DESeq2 will output results for the last term in the formula
ddsoverall <- DESeqDataSetFromMatrix(countData = counts,
colData = metadata,
design = ~ Experiment + Treatment)
ddsoverall$Treatment <- factor(ddsoverall$Treatment, levels = c("CTR", "IL4IL13"))
keep <- rowSums(counts(ddsoverall)) >= 10
ddsoverall <- ddsoverall[keep,]
ddsoverall <- estimateSizeFactors(ddsoverall)
ddsoverall <- DESeq(ddsoverall)
resultsNames(ddsoverall)
plotDispEsts(ddsoverall)
resultsNames(ddsoverall)
colData(ddsoverall)
normalized_counts <- counts(ddsoverall, normalized = TRUE)
log2_normalized_counts <- log2(normalized_counts + 1)  # Adding 1 to avoid log(0)
vsd_overall <- vst(ddsoverall, blind = TRUE)
vsd_mat <- assay(vsd_overall)
vsd_cor <- cor(vsd_mat)
vsd_cor
pheatmap(vsd_cor, annotation = select(metadata, Treatment))
pheatmap(vsd_cor, annotation = select(metadata, Treatment), clustering_distance_rows = "maximum)
pheatmap(vsd_cor, annotation = select(metadata, Treatment), clustering_distance_rows = "maximum")
pheatmap(vsd_cor, annotation = select(metadata, Treatment), clustering_distance_rows = "manhattan")
pheatmap(vsd_cor, annotation = select(metadata, Treatment), clustering_distance_rows = "canberra")
pheatmap(vsd_cor, annotation = select(metadata, Treatment), clustering_distance_rows = "Binary")
pheatmap(vsd_cor, annotation = select(metadata, Treatment), clustering_distance_rows = "binary")
pheatmap(vsd_cor, annotation = select(metadata, Treatment), clustering_distance_rows = "minkowski")
pheatmap(vsd_cor, annotation = select(metadata, Treatment), clustering_distance_rows = "euclidian")
pheatmap(vsd_cor, annotation = select(metadata, Treatment), clustering_distance_rows = "correlation")
pheatmap(vsd_cor, annotation = select(metadata, Treatment), clustering_distance_rows = "euclidean")
plotPCA(vsd_overall, intgroup = "Treatment")
plotPCA(vsd_overall, intgroup = "Experiment")
plotPCA(vsd_overall, intgroup = "Treatment")
knitr::opts_knit$set(root.dir = "C:/Users/suzan/Capita_Microplastics/PCA")
library(data.table)
library(readbulk)
library(dplyr)
library(ggrepel)
library(cli)
library(ggplot2)
library(grid)
library(reshape2)
library(tidyverse)
library(ggfortify)
library(PCAtools)
library(limma)
library(gtools)
library(factoextra)
library(ggrepel)
library(tibble)
library(tidyverse)
library(ggpubr)
library(ggalt)
library(cowplot)
library(janitor)
library(limma)
library(edgeR)
plotPCA(vsd_overall, intgroup = c("Experiment", "Treatment"))
plotPCA(vsd_overall, intgroup = "Treatment")
plotPCA(vsd_overall, intgroup = c("Experiment", "Treatment"))
plotPCA(vsd_overall, intgroup = c("Experiment")
plotPCA(vsd_overall, intgroup = c("Experiment"))
plotPCA(vsd_overall, intgroup = c("Experiment"))
# labeled PCA (can change text with repel for white box)
labeled_PCA <- plotPCA(vsd_overall, intgroup = c("Experiment", "Treatment"))
labeled_PCA + geom_text_repel(aes_string(x = "PC1", y = "PC2", label = "name"), color = "black", size = 2)
# PCA with different shapes
new_PCA <- plotPCA(vsd_overall, intgroup = c("Experiment", "Treatment"), returnData = TRUE)
percentVar <- round(100 * attr(new_PCA, "percentVar"))
ggplot(new_PCA, aes(PC1, PC2, color=cell_type, shape=condition)) +
geom_point(size=3) +
xlab(paste0("PC1: ", percentVar[1], "% variance")) +
ylab(paste0("PC2: ", percentVar[2], "% variance")) +
coord_fixed()
sub_results <- results(ddsoverall, contrast = c("condition", "co", "mono"),
name = "condition_mono_vs_co",
alpha = 0.5)
sub_results <- results(ddsoverall, contrast = c("Experiment", "Treatment"),
name = "condition_BSA_vs_IL4+IL13",
alpha = 0.5)
sub_results <- results(ddsoverall, contrast = c("CTR", "IL4IL13"),
name = "condition_BSA_vs_IL4+IL13",
alpha = 0.5)
sub_results <- results(ddsoverall, contrast = c("Treatment","CTR", "IL4IL13"),
name = "condition_BSA_vs_IL4+IL13",
alpha = 0.5)
head(sub_results)
sub_results_lfc <- results(ddsoverall,
name = "condition_BSA_vs_IL4+IL13",
alpha = 0.5)
sub_results_lfc <- results(ddsoverall,
name = "condition_BSA_vs_IL4+IL13",
alpha = 0.5)
sub_results <- results(ddsoverall, contrast = c("Treatment","CTR", "IL4IL13"),
name = "condition_BSA_vs_IL4IL13",
alpha = 0.5)
sub_results_lfc <- results(ddsoverall,
name = "condition_BSA_vs_IL4IL13",
alpha = 0.5)
sub_results <- results(ddsoverall, contrast = c("Treatment","CTR", "IL4IL13"),
name = "condition_CTR_vs_IL4IL13",
alpha = 0.5)
head(sub_results)
sub_results_lfc <- results(ddsoverall,
name = "condition_CTR_vs_IL4IL13",
alpha = 0.5)
View(ddsoverall)
View(metadata)
