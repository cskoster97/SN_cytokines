# check if order of samples is the same in metadata and count table
rownames(metadata)
colnames(counts)
all(rownames(metadata) == colnames(counts))
# remember that DESeq2 will output results for the last term in the formula
ddsoverall <- DESeqDataSetFromMatrix(countData = counts,
colData = metadata,
design = ~ Experiment + Treatment)
ddsoverall$Treatment <- factor(ddsoverall$Treatment, levels = c("CTR", "IL4IL13"))
keep <- rowSums(counts(ddsoverall)) >= 10
ddsoverall <- ddsoverall[keep,]
ddsoverall <- DESeq(ddsoverall)
# Generate data table of epithelial data
resoverall <- results(ddsoverall)
resultsNames(ddsoverall)
normalized_counts <- counts(ddsoverall, normalized = TRUE)
log2_normalized_counts <- log2(normalized_counts + 1)  # Adding 1 to avoid log(0)
vsd_overall <- vst(ddsoverall, blind = TRUE)
# Perform PCA
pca <- prcomp(t(vsd_cor), scale. = TRUE)
# Calculate the proportion of variance explained by each component
explained_variance <- pca$sdev^2 / sum(pca$sdev^2)
# Create a data frame to store the results
pca_variance_df <- data.frame(PC = 1:length(explained_variance),
Variance = explained_variance)
# Extract the assay data from variance-stabilizing transformation (VST)
pca_data_vsd <- plotPCA(vsd, intgroup = "Treatment", returnData = TRUE)
# Extract the assay data from variance-stabilizing transformation (VST)
pca_data_vsd <- plotPCA(vsd_cor, intgroup = "Treatment", returnData = TRUE)
# Extract the assay data from variance-stabilizing transformation (VST)
pca_data_vsd <- plotPCA(vsd_overall, intgroup = "Treatment", returnData = TRUE)
# pca_data_vsd now contains PC1 and PC2 (you can extract PC3 from vsd)
# Perform PCA manually on the VST-transformed data to get PC3
pca_manual <- prcomp(t(assay(vsd_overall)))
# Add PC3 to the PCA data returned by plotPCA
pca_data_vsd$PC3 <- pca_manual$x[, 3]
# Plot PC2 vs PC3 using ggplot2
ggplot(pca_data_vsd, aes(x = PC2, y = PC3, color = Treatment)) +
geom_point(size = 3) +
theme_minimal() +
labs(x = "PC2", y = "PC3", title = "PCA: PC2 vs PC3")
# Plot PC2 vs PC3 using ggplot2
ggplot(pca_data_vsd, aes(x = PC2, y = PC3, color = Treatment)) +
geom_point(size = 3) +
geom_text_repel(size = 3, max.overlaps = 10) +
theme_minimal() +
labs(x = "PC2", y = "PC3", title = "PCA: PC2 vs PC3")
# Plot PC2 vs PC3 using ggplot2
ggplot(pca_data_vsd, aes(x = PC2, y = PC3, color = Treatment)) +
geom_point(size = 3) +
geom_text_repel(size = 3, max.overlaps = 10, label = 'name') +
theme_minimal() +
labs(x = "PC2", y = "PC3", title = "PCA: PC2 vs PC3")
# Plot PC2 vs PC3 using ggplot2
ggplot(pca_data_vsd, aes(x = PC2, y = PC3, color = Treatment)) +
geom_point(size = 3) +
geom_text_repel(size = 3, max.overlaps = 10, label = "name") +
theme_minimal() +
labs(x = "PC2", y = "PC3", title = "PCA: PC2 vs PC3")
# Plot PC2 vs PC3 using ggplot2
ggplot(pca_data_vsd, aes(x = PC2, y = PC3, color = Treatment), label = "sample") +
geom_point(size = 3) +
geom_text_repel(size = 3, max.overlaps = 10, label = "name") +
theme_minimal() +
labs(x = "PC2", y = "PC3", title = "PCA: PC2 vs PC3")
# Plot PC2 vs PC3 using ggplot2
ggplot(pca_data_vsd, aes(x = PC2, y = PC3, color = Treatment), label = "name") +
geom_point(size = 3) +
geom_text_repel(size = 3, max.overlaps = 10) +
theme_minimal() +
labs(x = "PC2", y = "PC3", title = "PCA: PC2 vs PC3")
# Plot PC2 vs PC3 using ggplot2
ggplot(pca_data_vsd, aes(x = PC2, y = PC3, color = Treatment), label = "Sample") +
geom_point(size = 3) +
geom_text_repel(size = 3, max.overlaps = 10) +
theme_minimal() +
labs(x = "PC2", y = "PC3", title = "PCA: PC2 vs PC3")
# Plot PC2 vs PC3 using ggplot2
ggplot(pca_data_vsd, aes(x = PC2, y = PC3, color = Treatment), label = "Condition") +
geom_point(size = 3) +
geom_text_repel(size = 3, max.overlaps = 10) +
theme_minimal() +
labs(x = "PC2", y = "PC3", title = "PCA: PC2 vs PC3")
View(metadata)
# Plot PC2 vs PC3 using ggplot2
ggplot(pca_data_vsd, aes(x = PC2, y = PC3, color = Treatment, label = "Condition")) +
geom_point(size = 3) +
geom_text_repel(size = 3, max.overlaps = 10) +
theme_minimal() +
labs(x = "PC2", y = "PC3", title = "PCA: PC2 vs PC3")
# Plot PC2 vs PC3 using ggplot2
ggplot(pca_data_vsd, aes(x = PC2, y = PC3, color = Treatment, label = "name")) +
geom_point(size = 3) +
geom_text_repel(size = 3, max.overlaps = 10) +
theme_minimal() +
labs(x = "PC2", y = "PC3", title = "PCA: PC2 vs PC3")
# Plot PC2 vs PC3 using ggplot2
ggplot(pca_data_vsd, aes(x = PC2, y = PC3, color = Treatment, label)) +
geom_point(size = 3) +
geom_text_repel(size = 3, max.overlaps = 10) +
theme_minimal() +
labs(x = "PC2", y = "PC3", title = "PCA: PC2 vs PC3")
View(pca_data_vsd)
# Plot PC2 vs PC3 using ggplot2
ggplot(pca_data_vsd, aes(x = PC2, y = PC3, color = Treatment, label="name")) +
geom_point(size = 3) +
geom_text_repel(size = 3, max.overlaps = 10) +
theme_minimal() +
labs(x = "PC2", y = "PC3", title = "PCA: PC2 vs PC3")
# Plot PC2 vs PC3 using ggplot2
ggplot(pca_data_vsd, aes(x = PC2, y = PC3, color = Treatment, label = name)) +
geom_point(size = 3) +
geom_text_repel(size = 3, max.overlaps = 10) +
theme_minimal() +
labs(x = "PC2", y = "PC3", title = "PCA: PC2 vs PC3")
# Plot PC1 vs PC3 using ggplot2
ggplot(pca_data_vsd, aes(x = PC1, y = PC3, color = Treatment, label = name)) +
geom_point(size = 3) +
geom_text_repel(size = 3, max.overlaps = 10) +
theme_minimal() +
labs(x = "PC1", y = "PC3", title = "PCA: PC1 vs PC3")
# Plot PC1 vs PC3 using ggplot2
ggplot(pca_data_vsd, aes(x = PC1, y = PC4, color = Treatment, label = name)) +
geom_point(size = 3) +
geom_text_repel(size = 3, max.overlaps = 10) +
theme_minimal() +
labs(x = "PC1", y = "PC4", title = "PCA: PC1 vs PC4")
# Add PC4 to the PCA data returned by plotPCA
pca_data_vsd$PC4 <- pca_manual$x[, 4]
# Plot PC1 vs PC3 using ggplot2
ggplot(pca_data_vsd, aes(x = PC1, y = PC4, color = Treatment, label = name)) +
geom_point(size = 3) +
geom_text_repel(size = 3, max.overlaps = 10) +
theme_minimal() +
labs(x = "PC1", y = "PC4", title = "PCA: PC1 vs PC4")
# Plot PC1 vs PC3 using ggplot2
ggplot(pca_data_vsd, aes(x = PC2, y = PC4, color = Treatment, label = name)) +
geom_point(size = 3) +
geom_text_repel(size = 3, max.overlaps = 10) +
theme_minimal() +
labs(x = "PC2", y = "PC4", title = "PCA: PC2 vs PC4")
# Plot PC1 vs PC3 using ggplot2
ggplot(pca_data_vsd, aes(x = PC3, y = PC4, color = Treatment, label = name)) +
geom_point(size = 3) +
geom_text_repel(size = 3, max.overlaps = 10) +
theme_minimal() +
labs(x = "PC3", y = "PC4", title = "PCA: PC3 vs PC4")
# Filter metadata to include only rows with treatment identifier "IL4IL13 or TGF"
metadata <- metadata %>% filter(Treatment %in% c("CTR", "TGF"))
metadata <- read.csv("Metadata.csv", row.names=1)
# Filter metadata to include only rows with treatment identifier "IL4IL13 or TGF"
metadata <- metadata %>% filter(Treatment %in% c("CTR", "TGF"))
# Extract the row names (these will be the column names in rawcounts)
selected_columns <- rownames(metadata)
# Select the corresponding columns from rawcounts
counts <- counts %>% select(all_of(selected_columns))
counts <- read.csv("Rawcounts.csv", row.names=1)
# Extract the row names (these will be the column names in rawcounts)
selected_columns <- rownames(metadata)
# Select the corresponding columns from rawcounts
counts <- counts %>% select(all_of(selected_columns))
# check if order of samples is the same in metadata and count table
rownames(metadata)
colnames(counts)
all(rownames(metadata) == colnames(counts))
# remember that DESeq2 will output results for the last term in the formula
ddsoverall <- DESeqDataSetFromMatrix(countData = counts,
colData = metadata,
design = ~ Experiment + Treatment)
ddsoverall$Treatment <- factor(ddsoverall$Treatment, levels = c("CTR", "TGF"))
keep <- rowSums(counts(ddsoverall)) >= 10
ddsoverall <- ddsoverall[keep,]
ddsoverall <- DESeq(ddsoverall)
# Generate data table of epithelial data
resoverall <- results(ddsoverall)
resultsNames(ddsoverall)
normalized_counts <- counts(ddsoverall, normalized = TRUE)
log2_normalized_counts <- log2(normalized_counts + 1)  # Adding 1 to avoid log(0)
vsd_overall <- vst(ddsoverall, blind = TRUE)
# Perform PCA
pca <- prcomp(t(vsd_cor), scale. = TRUE)
# Calculate the proportion of variance explained by each component
explained_variance <- pca$sdev^2 / sum(pca$sdev^2)
# Create a data frame to store the results
pca_variance_df <- data.frame(PC = 1:length(explained_variance),
Variance = explained_variance)
# Extract the assay data from variance-stabilizing transformation (VST)
pca_data_vsd <- plotPCA(vsd_overall, intgroup = "Treatment", returnData = TRUE)
# pca_data_vsd now contains PC1 and PC2 (you can extract PC3 from vsd)
# Perform PCA manually on the VST-transformed data to get PC3
pca_manual <- prcomp(t(assay(vsd_overall)))
# Add PC3 to the PCA data returned by plotPCA
pca_data_vsd$PC3 <- pca_manual$x[, 3]
# Add PC4 to the PCA data returned by plotPCA
pca_data_vsd$PC4 <- pca_manual$x[, 4]
# Plot PC2 vs PC3 using ggplot2
ggplot(pca_data_vsd, aes(x = PC2, y = PC3, color = Treatment, label = name)) +
geom_point(size = 3) +
geom_text_repel(size = 3, max.overlaps = 10) +
theme_minimal() +
labs(x = "PC2", y = "PC3", title = "PCA: PC2 vs PC3")
# Plot PC1 vs PC3 using ggplot2 - adapt to plot PC-values of choice
ggplot(pca_data_vsd, aes(x = PC3, y = PC4, color = Treatment, label = name)) +
geom_point(size = 3) +
geom_text_repel(size = 3, max.overlaps = 10) +
theme_minimal() +
labs(x = "PC3", y = "PC4", title = "PCA: PC3 vs PC4")
# Plot PC1 vs PC3 using ggplot2 - adapt to plot PC-values of choice
ggplot(pca_data_vsd, aes(x = PC1, y = PC4, color = Treatment, label = name)) +
geom_point(size = 3) +
geom_text_repel(size = 3, max.overlaps = 10) +
theme_minimal() +
labs(x = "PC3", y = "PC4", title = "PCA: PC3 vs PC4")
# Plot PC1 vs PC3 using ggplot2 - adapt to plot PC-values of choice
ggplot(pca_data_vsd, aes(x = PC2, y = PC4, color = Treatment, label = name)) +
geom_point(size = 3) +
geom_text_repel(size = 3, max.overlaps = 10) +
theme_minimal() +
labs(x = "PC3", y = "PC4", title = "PCA: PC3 vs PC4")
# Plot PC1 vs PC3 using ggplot2 - adapt to plot PC-values of choice
ggplot(pca_data_vsd, aes(x = PC3, y = PC4, color = Treatment, label = name)) +
geom_point(size = 3) +
geom_text_repel(size = 3, max.overlaps = 10) +
theme_minimal() +
labs(x = "PC3", y = "PC4", title = "PCA: PC3 vs PC4")
# Plot PC1 vs PC3 using ggplot2 - adapt to plot PC-values of choice
ggplot(pca_data_vsd, aes(x = PC1, y = PC3, color = Treatment, label = name)) +
geom_point(size = 3) +
geom_text_repel(size = 3, max.overlaps = 10) +
theme_minimal() +
labs(x = "PC3", y = "PC4", title = "PCA: PC3 vs PC4")
# Plot PC1 vs PC3 using ggplot2 - adapt to plot PC-values of choice
ggplot(pca_data_vsd, aes(x = PC2, y = PC3, color = Treatment, label = name)) +
geom_point(size = 3) +
geom_text_repel(size = 3, max.overlaps = 10) +
theme_minimal() +
labs(x = "PC3", y = "PC4", title = "PCA: PC3 vs PC4")
# Plot PC1 vs PC3 using ggplot2 - adapt to plot PC-values of choice
ggplot(pca_data_vsd, aes(x = PC1, y = PC5, color = Treatment, label = name)) +
geom_point(size = 3) +
geom_text_repel(size = 3, max.overlaps = 10) +
theme_minimal() +
labs(x = "PC3", y = "PC4", title = "PCA: PC3 vs PC4")
# Add PC5 to the PCA data returned by plotPCA
pca_data_vsd$PC5 <- pca_manual$x[, 5]
# Plot PC1 vs PC3 using ggplot2 - adapt to plot PC-values of choice
ggplot(pca_data_vsd, aes(x = PC1, y = PC5, color = Treatment, label = name)) +
geom_point(size = 3) +
geom_text_repel(size = 3, max.overlaps = 10) +
theme_minimal() +
labs(x = "PC3", y = "PC4", title = "PCA: PC3 vs PC4")
# Plot PC1 vs PC3 using ggplot2 - adapt to plot PC-values of choice
ggplot(pca_data_vsd, aes(x = PC1, y = PC5, color = Treatment, label = name)) +
geom_point(size = 3) +
geom_text_repel(size = 3, max.overlaps = 10) +
theme_minimal() +
labs(x = "PC3", y = "PC4", title = "PCA: PC1 vs PC5")
# Plot PC1 vs PC3 using ggplot2 - adapt to plot PC-values of choice
ggplot(pca_data_vsd, aes(x = PC1, y = PC5, color = Treatment, label = name)) +
geom_point(size = 3) +
geom_text_repel(size = 3, max.overlaps = 10) +
theme_minimal() +
labs(x = "PC1", y = "PC5", title = "PCA: PC1 vs PC5")
# Plot PC1 vs PC3 using ggplot2 - adapt to plot PC-values of choice
ggplot(pca_data_vsd, aes(x = PC2, y = PC5, color = Treatment, label = name)) +
geom_point(size = 3) +
geom_text_repel(size = 3, max.overlaps = 10) +
theme_minimal() +
labs(x = "PC2", y = "PC5", title = "PCA: PC2 vs PC5")
# Plot PC1 vs PC3 using ggplot2 - adapt to plot PC-values of choice
ggplot(pca_data_vsd, aes(x = PC3, y = PC5, color = Treatment, label = name)) +
geom_point(size = 3) +
geom_text_repel(size = 3, max.overlaps = 10) +
theme_minimal() +
labs(x = "PC3", y = "PC5", title = "PCA: PC3 vs PC5")
# Plot PC1 vs PC3 using ggplot2 - adapt to plot PC-values of choice
ggplot(pca_data_vsd, aes(x = PC4, y = PC5, color = Treatment, label = name)) +
geom_point(size = 3) +
geom_text_repel(size = 3, max.overlaps = 10) +
theme_minimal() +
labs(x = "PC4", y = "PC5", title = "PCA: PC4 vs PC5")
# Plot PC1 vs PC3 using ggplot2 - adapt to plot PC-values of choice
ggplot(pca_data_vsd, aes(x = PC1, y = PC3, color = Treatment, label = name)) +
geom_point(size = 3) +
geom_text_repel(size = 3, max.overlaps = 10) +
theme_minimal() +
labs(x = "PC1", y = "PC3", title = "PCA: PC1 vs PC3")
metadata <- read.csv("Metadata.csv", row.names=1)
counts <- read.csv("Rawcounts.csv", row.names=1)
# Filter metadata to include only rows with treatment identifier "IL4IL13 or TGF"
metadata <- metadata %>% filter(Treatment %in% c("CTR", "IL4IL13"))
```{r}
library("DESeq2")
library("edgeR")
library("tidyverse")
library("ggrepel")
library("ggplot2")
library("ggfortify")
library("RColorBrewer")
library("pheatmap")
library("reshape")
library(openxlsx)
library("EnhancedVolcano") #install BioC::Manager and then EnhancedVolcano
# Filter metadata to include only rows with treatment identifier "IL4IL13 or TGF"
metadata <- metadata %>% filter(Treatment %in% c("CTR", "IL4IL13"))
# Extract the row names (these will be the column names in rawcounts)
selected_columns <- rownames(metadata)
# Select the corresponding columns from rawcounts
counts <- counts %>% select(all_of(selected_columns))
# check if order of samples is the same in metadata and count table
rownames(metadata)
colnames(counts)
all(rownames(metadata) == colnames(counts))
# remember that DESeq2 will output results for the last term in the formula
ddsoverall <- DESeqDataSetFromMatrix(countData = counts,
colData = metadata,
design = ~ Experiment + Treatment)
ddsoverall$Treatment <- factor(ddsoverall$Treatment, levels = c("CTR", "TGF"))
keep <- rowSums(counts(ddsoverall)) >= 10
ddsoverall <- ddsoverall[keep,]
ddsoverall <- DESeq(ddsoverall)
# Generate data table of epithelial data
resoverall <- results(ddsoverall)
```{r}
ddsoverall$Treatment <- factor(ddsoverall$Treatment, levels = c("CTR", "IL4IL13"))
keep <- rowSums(counts(ddsoverall)) >= 10
ddsoverall <- ddsoverall[keep,]
ddsoverall <- DESeq(ddsoverall)
View(metadata)
# remember that DESeq2 will output results for the last term in the formula
ddsoverall <- DESeqDataSetFromMatrix(countData = counts,
colData = metadata,
design = ~ Experiment + Treatment)
ddsoverall$Treatment <- factor(ddsoverall$Treatment, levels = c("CTR", "IL4IL13"))
# remember that DESeq2 will output results for the last term in the formula
ddsoverall <- DESeqDataSetFromMatrix(countData = counts,
colData = metadata,
design = ~ Experiment + Treatment)
ddsoverall$Treatment <- factor(ddsoverall$Treatment, levels = c("CTR", "IL4IL13"))
keep <- rowSums(counts(ddsoverall)) >= 10
ddsoverall <- ddsoverall[keep,]
ddsoverall <- DESeq(ddsoverall)
# Generate data table of epithelial data
resoverall <- results(ddsoverall)
resultsNames(ddsoverall)
normalized_counts <- counts(ddsoverall, normalized = TRUE)
log2_normalized_counts <- log2(normalized_counts + 1)  # Adding 1 to avoid log(0)
vsd_overall <- vst(ddsoverall, blind = TRUE)
vsd_mat <- assay(vsd_overall)
vsd_cor <- cor(vsd_mat)
```{r}
sub_results <- results(ddsoverall, contrast = c("Treatment","CTR", "IL4IL13"),
alpha = 0.5)
#head(sub_results)
sub_results_LFC <- results(ddsoverall,
name = "Treatment_IL4IL13_vs_CTR",
alpha = 0.5)
normalized_counts <- counts(ddsoverall, normalized = TRUE) #extracted counts normalized by estimateSIzeFactors()
EnhancedVolcano(sub_res_sig,
lab = rownames(sub_res_sig),
x = 'log2FoldChange',
y = 'padj',
xlim = c(-10, 12), #edit
ylim = c(0, 50), #edit
title = "Effect of IL4/IL13 on hPSC-derived sensory neurons",
pCutoff = 0.05,
FCcutoff = 1.5, #1
pointSize = 2.0,
labSize = 4.0,
col=c('grey', 'green4', 'blue', 'red3'),
colAlpha = 1)
EnhancedVolcano(sub_res_sig,
lab = rownames(sub_res_sig),
x = 'log2FoldChange',
y = 'padj',
xlim = c(-20, 20), #edit
ylim = c(0, 100), #edit
title = "Effect of IL4/IL13 on hPSC-derived sensory neurons",
pCutoff = 0.05,
FCcutoff = 1.5, #1
pointSize = 2.0,
labSize = 4.0,
col=c('grey', 'green4', 'blue', 'red3'),
colAlpha = 1)
EnhancedVolcano(sub_res_sig,
lab = rownames(sub_res_sig),
x = 'log2FoldChange',
y = 'padj',
xlim = c(-10, 15), #edit
ylim = c(0, 50), #edit
title = "Effect of IL4/IL13 on hPSC-derived sensory neurons",
pCutoff = 0.05,
FCcutoff = 1.5, #1
pointSize = 2.0,
labSize = 4.0,
col=c('grey', 'green4', 'blue', 'red3'),
colAlpha = 1)
EnhancedVolcano(sub_res_sig,
lab = rownames(sub_res_sig),
x = 'log2FoldChange',
y = 'padj',
xlim = c(-10, 12), #edit
ylim = c(0, 50), #edit
title = "Effect of IL4/IL13 on hPSC-derived sensory neurons",
pCutoff = 0.05,
FCcutoff = 1.5, #1
pointSize = 2.0,
labSize = 4.0,
col=c('grey', 'green4', 'blue', 'red3'),
colAlpha = 1)
EnhancedVolcano(sub_res_sig,
lab = rownames(sub_res_sig),
x = 'log2FoldChange',
y = 'padj',
xlim = c(-10, 13), #edit
ylim = c(0, 50), #edit
title = "Effect of IL4/IL13 on hPSC-derived sensory neurons",
pCutoff = 0.05,
FCcutoff = 1.5, #1
pointSize = 2.0,
labSize = 4.0,
col=c('grey', 'green4', 'blue', 'red3'),
colAlpha = 1)
library("DESeq2")
library("edgeR")
library("tidyverse")
library("ggrepel")
library("ggplot2")
library("ggfortify")
library("RColorBrewer")
library("pheatmap")
library("reshape")
library(openxlsx)
library("EnhancedVolcano") #install BioC::Manager and then EnhancedVolcano
metadata <- read.csv("Metadata.csv", row.names=1)
counts <- read.csv("Rawcounts.csv", row.names=1)
# Filter metadata to include only rows with treatment identifier "IL4IL13 or TGF"
metadata <- metadata %>% filter(Treatment %in% c("CTR", "TGF"))
# Extract the row names (these will be the column names in rawcounts)
selected_columns <- rownames(metadata)
# Select the corresponding columns from rawcounts
counts <- counts %>% select(all_of(selected_columns))
# check if order of samples is the same in metadata and count table
rownames(metadata)
colnames(counts)
all(rownames(metadata) == colnames(counts))
# remember that DESeq2 will output results for the last term in the formula
ddsoverall <- DESeqDataSetFromMatrix(countData = counts,
colData = metadata,
design = ~ Experiment + Treatment)
ddsoverall$Treatment <- factor(ddsoverall$Treatment, levels = c("CTR", "TGF"))
keep <- rowSums(counts(ddsoverall)) >= 10
ddsoverall <- ddsoverall[keep,]
ddsoverall <- DESeq(ddsoverall)
# Generate data table of epithelial data
resoverall <- results(ddsoverall)
resultsNames(ddsoverall)
normalized_counts <- counts(ddsoverall, normalized = TRUE)
log2_normalized_counts <- log2(normalized_counts + 1)  # Adding 1 to avoid log(0)
vsd_overall <- vst(ddsoverall, blind = TRUE)
vsd_mat <- assay(vsd_overall)
vsd_cor <- cor(vsd_mat)
pheatmap(vsd_cor, annotation = select(metadata, Treatment), clustering_distance_rows = "euclidean")
sig_norm_counts <- normalized_counts[rownames(sub_res_sig),]
sub_results <- results(ddsoverall, contrast = c("Treatment","CTR", "TGF"),
alpha = 0.5)
#head(sub_results)
sub_results_LFC <- results(ddsoverall,
name = "Treatment_TGF_vs_CTR",
alpha = 0.5)
normalized_counts <- counts(ddsoverall, normalized = TRUE)
log2_normalized_counts <- log2(normalized_counts + 1)  # Adding 1 to avoid log(0)
vsd_overall <- vst(ddsoverall, blind = TRUE)
sub_res_df <- data.frame(sub_results_LFC)
sub_res_sig <- subset(sub_res_df, padj < 0.05) %>%
arrange(padj)
normalized_counts <- counts(ddsoverall, normalized = TRUE) #extracted counts normalized by estimateSIzeFactors()
sig_norm_counts <- normalized_counts[rownames(sub_res_sig),]
#display.brewer.all()
heat.colors <- brewer.pal (n = 6, name = "RdYlBu")
pheatmap(sig_norm_counts,
color = colorRampPalette(c("blue", "white", "red"))(50),
cluster_rows = T,
show_rownames = F,
annotation = select(metadata, Treatment),
scale = "row",
clustering_distance_rows = "euclidean")
# Select top genes based on adjusted p-values
top_genes <- rownames(sub_res_sig)[1:50]  # Get the gene names or rownames
# Extract normalized counts for the top significant genes
top_norm_counts <- normalized_counts[top_genes, ]
# Optionally, log-transform the counts (adding 1 to avoid log of 0)
log_transformed_counts <- log2(top_norm_counts + 1)
# Create a heatmap using pheatmap
pheatmap(log_transformed_counts,
color = colorRampPalette(c("blue", "white", "red"))(50),
scale = "row",  # Scale by row to see relative expression
show_rownames = TRUE,
cluster_rows = TRUE,
annotation = select(metadata, Treatment))  # Add condition metadata
```{r}
padj_top50_genes <- head(sub_res_sig, 50)
padj_top50_sig_norm_counts <- merge(normalized_counts, padj_top50_genes, by = 0)
values_padj_top50_sig_norm_counts <- padj_top50_sig_norm_counts[,2:17]
# Set the row names of the dataframe using the "row.names" column
rownames(values_padj_top50_sig_norm_counts) <- padj_top50_sig_norm_counts$Row.names
pheatmap(values_padj_top50_sig_norm_counts,
color = colorRampPalette(c("blue", "white", "red"))(50),
cluster_rows = T,
show_rownames = T,
annotation = select(metadata, Treatment),
scale = "row")
