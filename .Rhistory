#acquire information on folder location, start with './' and no '/' at the end:
folder.Ca2 <- readline(prompt="Enter directory to file: ")
#16#acquire information on file name:
file.Ca2 <- readline(prompt="Enter file name: ")
```{r}
#retrieve the excel file and safe as Ca.values
#Ca.values <- read_excel(file.Ca2)
Ca.values <- read.csv(file.path(folder.Ca2, paste0(file.Ca2, ".csv")))
#delete row 1 (Nm2 etc.)
Ca.values2 <- Ca.values[-1,]
#rename the columns
colnames(Ca.values2)  <- c("Name", "Time", "Area", "Intensity Mean Value", "Diameter")   # change column name for x column
#sort by Name
Ca.Values2.sort <- Ca.values2[order(Ca.values2$"Name"),]
#remove rows that do not contain Intensity Mean Value
Ca.Values2.sort <- Ca.Values2.sort[Ca.Values2.sort$Area == "Intensity Mean Value", ]
#extract maximum and minimum value of Time
min.time <- min(Ca.Values2.sort$Time)
max.time <- max(Ca.Values2.sort$Time)
repeats <- max.time-1
#calculate row numbers of Blanks
total.rows <- nrow(Ca.Values2.sort)
start.Blanks <- total.rows-2*max.time+1
#get Blanks in a separate file
Blanks.file <- Ca.Values2.sort[start.Blanks:total.rows, ]
Ca.Values2.sort.only <- Ca.Values2.sort[-(start.Blanks:total.rows), ]    #remove blanks from file
#Calculate average blank value
total.rows.Blanks <- nrow(Blanks.file)
start.Blanks2 <- total.rows.Blanks-max.time+1
#Run the loop over all timepoint measurements, calculating the average blank value for each timepoint
x <- c(1:max.time)
count.1 <- 0
count.2 <- start.Blanks2-1      #start with Blanks of 2nd selection
Blanks.average <- rep(0, repeats)    #create empty vector to store average blanks values in
for (val in x) {
if (val %% 1 == 0) count.1 = count.1+1
if (val %% 1 == 0) count.2 = count.2+1
Blanks.average[val] <- mean(as.matrix(Blanks.file[c(count.1, count.2), 4]))
}
sessionInfo()
library(fgsea)
library(data.table)
library(ggplot2)
#library(ggplot)
library(tidyverse)
library(readr)
library(tibble)
library(dplyr)
library(digest)
library(enrichplot)
library(openxlsx)
# load the metadata and rowcount.csv file
setwd("G:/My Drive/RNAseq/Carli_SN+Cytokines/Analysis Carli/Results IL4_IL13-noSN20/")
metadata <- read.csv("Metadata_filtered_IL4IL13-noSN20.csv", row.names=1)
counts <- read.csv("Rawcounts_filtered_IL4IL13-noSN20.csv", row.names=1)
# check if order of samples is the same in metadata and count table
rownames(metadata)
colnames(counts)
all(rownames(metadata) == colnames(counts))
library("DESeq2")
library("edgeR")
library("tidyverse")
library("ggrepel")
library("ggplot2")
library("ggfortify")
library("RColorBrewer")
library("pheatmap")
library("reshape")
library(openxlsx)
library("EnhancedVolcano") #install BioC::Manager and then EnhancedVolcano
#library("annotables") #genesymbols aan ID matchen
# load the metadata and rowcount.csv file
setwd("G:/My Drive/RNAseq/Carli_SN+Cytokines/Analysis Carli")
metadata <- read.csv("Metadata.csv", row.names=1)
counts <- read.csv("Rawcounts.csv", row.names=1)
# Filter metadata to include only rows with treatment identifier "IL4IL13 or TGF"
metadata <- metadata %>% filter(Treatment %in% c("CTR", "TGF"))
# Filter metadata to include only rows with Experiment identifier SN21-25
metadata <- metadata %>% filter(Experiment %in% c("B", "C", "D", "E", "F"))
# Extract the row names (these will be the column names in rawcounts)
selected_columns <- rownames(metadata)
# Select the corresponding columns from rawcounts
counts <- counts %>% select(all_of(selected_columns))
# check if order of samples is the same in metadata and count table
rownames(metadata)
colnames(counts)
all(rownames(metadata) == colnames(counts))
# remember that DESeq2 will output results for the last term in the formula
ddsoverall <- DESeqDataSetFromMatrix(countData = counts,
colData = metadata,
design = ~ Experiment + Treatment)
ddsoverall$Treatment <- factor(ddsoverall$Treatment, levels = c("CTR", "TGF"))
keep <- rowSums(counts(ddsoverall)) >= 10
ddsoverall <- ddsoverall[keep,]
ddsoverall <- DESeq(ddsoverall)
# Generate data table of epithelial data
resoverall <- results(ddsoverall)
resultsNames(ddsoverall)
normalized_counts <- counts(ddsoverall, normalized = TRUE)
log2_normalized_counts <- log2(normalized_counts + 1)  # Adding 1 to avoid log(0)
vsd_overall <- vst(ddsoverall, blind = TRUE)
vsd_mat <- assay(vsd_overall)
vsd_cor <- cor(vsd_mat)
pheatmap(vsd_cor, annotation = select(metadata, Treatment), clustering_distance_rows = "euclidean")
metadata <- read.csv("Metadata_filtered_IL4IL13-noSN20.csv", row.names=1)
counts <- read.csv("Rawcounts_filtered_IL4IL13-noSN20.csv", row.names=1)
# load the metadata and rowcount.csv file
setwd("G:/My Drive/RNAseq/Carli_SN+Cytokines/Analysis Carli/Results IL4_IL13-noSN20/")
metadata <- read.csv("Metadata_filtered_IL4IL13-noSN20.csv", row.names=1)
counts <- read.csv("Rawcounts_filtered_IL4IL13-noSN20.csv", row.names=1)
# check if order of samples is the same in metadata and count table
rownames(metadata)
colnames(counts)
all(rownames(metadata) == colnames(counts))
sig_DEGs <- read.csv("LogFoldChanges_full_IL4IL13-noSN20.csv", sep = ",", row.names = 1)
sig_DEGs <- rownames_to_column(sig_DEGs, "Symbol")
stat <- sig_DEGs %>% select(1, stat)
ranks <- deframe(stat)
ranks <- sort(ranks, decreasing = TRUE)
head(ranks, 20)
fgsea_c2CP <- fgsea(pathways = c2CP_pathways,
stats = ranks,
minSize  = 5,
maxSize  = 1000,
nperm = 10000)
c2CP_pathways <- gmtPathways("G:/Mijn Drive/RNAseq/Carli_SN+Cytokines/Analysis Carli/GSEA/c2.cp.v2023.1.Hs.symbols.gmt")
c2CP_pathways <- gmtPathways("G:/Myn Drive/RNAseq/Carli_SN+Cytokines/Analysis Carli/GSEA/c2.cp.v2023.1.Hs.symbols.gmt")
c2CP_pathways <- gmtPathways("G:/My Drive/RNAseq/Carli_SN+Cytokines/Analysis Carli/GSEA/c2.cp.v2023.1.Hs.symbols.gmt")
fgsea_c2CP <- fgsea(pathways = c2CP_pathways,
stats = ranks,
minSize  = 5,
maxSize  = 1000,
nperm = 10000)
tidy_fgsea_c2CP <- fgsea_c2CP %>%
as_tibble() %>%
arrange(desc(NES))
tidy_fgsea_c2CP %>%
dplyr::select(-leadingEdge, -ES, -nMoreExtreme) %>%
arrange(padj) %>%
DT::datatable()
datatable_data <- as.data.frame(tidy_fgsea_c2CP) # Extract the data from the DT::datatable
wb <- createWorkbook() # Create a new Excel workbook
addWorksheet(wb, "DataTable") # Add a worksheet to the workbook
writeDataTable(wb, "DataTable", datatable_data) # Write the data from the DT::datatable to the Excel worksheet
#plot GSEA
collapsed_c2CP <- collapsePathways(fgsea_c2CP[order(pval)][padj < 0.05],
c2CP_pathways,
ranks)
main_c2CP <- fgsea_c2CP[pathway %in%
collapsed_c2CP$mainPathways][order(-NES), pathway]
main_res_c2CP <- fgsea_c2CP[fgsea_c2CP$pathway %in% main_c2CP]
main_res_c2CP$pathway <- sub("^REACTOME_|^WP_", "",main_res_c2CP$pathway)
num_top_pathways <- 50 # Choose the number of top pathways to display
# Select the top pathways based on NES
top_main_res_c2CP <- main_res_c2CP %>%
top_n(num_top_pathways, wt = NES)
ggplot(top_main_res_c2CP, aes(reorder(pathway, NES), NES)) +
geom_col(fill='dodgerblue') +
coord_flip() +
labs(x="Pathway", y="Normalized Enrichment Score",
title="GSEA of Molecular Canonical Pathways in Sensory Neurons exposed to IL4/IL13") +
theme_minimal() +
theme(
plot.title = element_text(size = 16, face = "bold", hjust = 0.5, vjust = 0.5),  # Center the title
axis.text.y = element_text(size = 12)  # Adjust axis text font size
)
# Plot enrichment for the pathway
plotEnrichment(H_pathways[[pathway_name]], stats = ranked_genes) +
ggtitle(paste("Enrichment plot for", pathway_name))
# Plot enrichment for the pathway
plotEnrichment(H_pathways[[pathway_name]], stats = ranks) +
ggtitle(paste("Enrichment plot for", pathway_name))
H_pathways <- gmtPathways("G:/Mijn Drive/RNAseq/Carli_SN+Cytokines/Analysis Carli/GSEA/h.all.v2023.1.Hs.symbols.gmt")
H_pathways <- gmtPathways("G:/My Drive/RNAseq/Carli_SN+Cytokines/Analysis Carli/GSEA/h.all.v2023.1.Hs.symbols.gmt")
#Run the GSEA
fgsea_H <- fgsea(pathways = H_pathways,
stats = ranks,
minSize  = 5,
maxSize  = 1000,
nperm = 10000)
# Plot enrichment for the pathway
plotEnrichment(H_pathways[[pathway_name]], stats = ranks) +
ggtitle(paste("Enrichment plot for", pathway_name))
# Plot enrichment for the pathway
pathway_name <- "PERIPHERAL_NERVOUS_SYSTEM_NEURON_DIFFERENTIATION"
plotEnrichment(H_pathways[[pathway_name]], stats = ranks) +
ggtitle(paste("Enrichment plot for", pathway_name))
setwd("G:/My Drive/RNAseq/Carli_SN+LUVA")
# load the metadata and rowcount.csv file
setwd("G:/Mijn Drive/RNAseq/Carli_SN+Cytokines/Analysis Carli/Results TGFb-noSN20/")
# load the metadata and rowcount.csv file
setwd("G:/My Drive/RNAseq/Carli_SN+Cytokines/Analysis Carli/Results TGFb-noSN20/")
metadata <- read.csv("Metadata_filtered_TGFb-noSN20.csv", row.names=1)
counts <- read.csv("Rawcounts_filtered_TGFb-noSN20.csv", row.names=1)
# check if order of samples is the same in metadata and count table
rownames(metadata)
colnames(counts)
all(rownames(metadata) == colnames(counts))
sig_DEGs <- read.csv("LogFoldChanges_full_TGFb-no20.csv", sep = ",", row.names = 1)
sig_DEGs <- rownames_to_column(sig_DEGs, "Symbol")
stat <- sig_DEGs %>% select(1, stat)
ranks <- deframe(stat)
ranks <- sort(ranks, decreasing = TRUE)
head(ranks, 20)
c2CP_pathways <- gmtPathways("G:/My Drive/RNAseq/Carli_SN+Cytokines/Analysis Carli/GSEA/c2.cp.v2023.1.Hs.symbols.gmt")
c5BP_pathways <- gmtPathways("G:/My Drive/RNAseq/Carli_SN+Cytokines/Analysis Carli/GSEA/c5.go.bp.v2023.1.Hs.symbols.gmt")
c7IM_pathways <- gmtPathways("G:/My Drive/RNAseq/Carli_SN+Cytokines/Analysis Carli/GSEA/c7.all.v2023.2.Hs.symbols.gmt")
#Run the GSEA
fgsea_H <- fgsea(pathways = H_pathways,
stats = ranks,
minSize  = 5,
maxSize  = 1000,
nperm = 10000)
#Tidy the table
tidy_fgsea_H <- fgsea_H %>%
as_tibble() %>%
arrange(desc(NES))
tidy_fgsea_H %>%
dplyr::select(-leadingEdge, -ES, -nMoreExtreme) %>%
arrange(padj) %>%
DT::datatable()
#Export table to excel
datatable_data <- as.data.frame(tidy_fgsea_H) # Extract the data from the DT::datatable
wb <- createWorkbook() # Create a new Excel workbook
addWorksheet(wb, "DataTable") # Add a worksheet to the workbook
writeDataTable(wb, "DataTable", datatable_data) # Write the data from the DT::datatable to the Excel worksheet
pathway_name <- "PERIPHERAL_NERVOUS_SYSTEM_NEURON_DIFFERENTIATION"
plotEnrichment(H_pathways[[pathway_name]], stats = ranks) +
ggtitle(paste("Enrichment plot for", pathway_name))
plotEnrichment(H_pathways[[pathway_name]], stats = ranks) +
ggtitle(paste("Enrichment plot for", pathway_name))
fgsea_c5BP <- fgsea(pathways = c5BP_pathways,
stats = ranks,
minSize  = 5,
maxSize  = 1000,
nperm = 10000)
tidy_fgsea_c5BP <- fgsea_c5BP %>%
as_tibble() %>%
arrange(desc(NES))
tidy_fgsea_c5BP %>%
dplyr::select(-leadingEdge, -ES, -nMoreExtreme) %>%
arrange(padj) %>%
DT::datatable()
datatable_data <- as.data.frame(tidy_fgsea_c5BP) # Extract the data from the DT::datatable
wb <- createWorkbook() # Create a new Excel workbook
addWorksheet(wb, "DataTable") # Add a worksheet to the workbook
writeDataTable(wb, "DataTable", datatable_data) # Write the data from the DT::datatable to the Excel worksheet
pathway_name <- "PERIPHERAL_NERVOUS_SYSTEM_NEURON_DIFFERENTIATION"
plotEnrichment(C5BP_pathways[[pathway_name]], stats = ranks) +
ggtitle(paste("Enrichment plot for", pathway_name))
c5BP_pathways <- gmtPathways("G:/My Drive/RNAseq/Carli_SN+Cytokines/Analysis Carli/GSEA/c5.go.bp.v2023.1.Hs.symbols.gmt")
plotEnrichment(c5BP_pathways[[pathway_name]], stats = ranks) +
ggtitle(paste("Enrichment plot for", pathway_name))
View(c5BP_pathways)
pathway_name <- "GOBP_PERIPHERAL_NERVOUS_SYSTEM_NEURON_DIFFERENTIATION"
plotEnrichment(c5BP_pathways[[pathway_name]], stats = ranks) +
ggtitle(paste("Enrichment plot for", pathway_name))
View(tidy_fgsea_c5BP)
View(c5BP_pathways)
# load the metadata and rowcount.csv file
setwd("G:/My Drive/RNAseq/Carli_SN+Cytokines/Analysis Carli/Results IL4_IL13-noSN20/")
metadata <- read.csv("Metadata_filtered_IL4IL13-noSN20.csv", row.names=1)
counts <- read.csv("Rawcounts_filtered_IL4IL13-noSN20.csv", row.names=1)
# check if order of samples is the same in metadata and count table
rownames(metadata)
colnames(counts)
all(rownames(metadata) == colnames(counts))
sig_DEGs <- read.csv("LogFoldChanges_full_IL4IL13-noSN20.csv", sep = ",", row.names = 1)
sig_DEGs <- rownames_to_column(sig_DEGs, "Symbol")
stat <- sig_DEGs %>% select(1, stat)
ranks <- deframe(stat)
ranks <- sort(ranks, decreasing = TRUE)
head(ranks, 20)
fgsea_c5BP <- fgsea(pathways = c5BP_pathways,
stats = ranks,
minSize  = 5,
maxSize  = 1000,
nperm = 10000)
tidy_fgsea_c5BP <- fgsea_c5BP %>%
as_tibble() %>%
arrange(desc(NES))
tidy_fgsea_c5BP %>%
dplyr::select(-leadingEdge, -ES, -nMoreExtreme) %>%
arrange(padj) %>%
DT::datatable()
wb <- createWorkbook() # Create a new Excel workbook
addWorksheet(wb, "DataTable") # Add a worksheet to the workbook
writeDataTable(wb, "DataTable", datatable_data) # Write the data from the DT::datatable to the Excel worksheet
# Plot enrichment for the pathway
pathway_name <- "GOBP_AXONEME_ASSEMBLY"
plotEnrichment(c5BP_pathways[[pathway_name]], stats = ranks) +
ggtitle(paste("Enrichment plot for", pathway_name))
pathway_name <- "GOBP_PERIPHERAL_NERVOUS_SYSTEM_NEURON_DIFFERENTIATION"
plotEnrichment(c5BP_pathways[[pathway_name]], stats = ranks) +
ggtitle(paste("Enrichment plot for", pathway_name))
fgsea_c5BP <- fgsea(pathways = c5BP_pathways,
stats = ranks,
minSize  = 5,
maxSize  = 1000,
nperm = 10000)
pathway_name <- "GOBP_AXONEME_ASSEMBLY"
plotEnrichment(c5BP_pathways[[pathway_name]], stats = ranks) +
ggtitle(paste("Enrichment plot for", pathway_name))
# load the metadata and rowcount.csv file
setwd("G:/My Drive/RNAseq/Carli_SN+Cytokines/Analysis Carli/Results TGFb-noSN20/")
metadata <- read.csv("Metadata_filtered_TGFb-noSN20.csv", row.names=1)
counts <- read.csv("Rawcounts_filtered_TGFb-noSN20.csv", row.names=1)
sig_DEGs <- read.csv("LogFoldChanges_full_TGFb-no20.csv", sep = ",", row.names = 1)
sig_DEGs <- rownames_to_column(sig_DEGs, "Symbol")
stat <- sig_DEGs %>% select(1, stat)
ranks <- deframe(stat)
ranks <- sort(ranks, decreasing = TRUE)
head(ranks, 20)
fgsea_c5BP <- fgsea(pathways = c5BP_pathways,
stats = ranks,
minSize  = 5,
maxSize  = 1000,
nperm = 10000)
pathway_name <- "GOBP_AXONEME_ASSEMBLY"
plotEnrichment(c5BP_pathways[[pathway_name]], stats = ranks) +
ggtitle(paste("Enrichment plot for", pathway_name))
library("DESeq2")
library("edgeR")
library("tidyverse")
library("ggrepel")
library("ggplot2")
library("ggfortify")
library("RColorBrewer")
library("pheatmap")
library("reshape")
library(openxlsx)
library("EnhancedVolcano") #install BioC::Manager and then EnhancedVolcano
#library("annotables") #genesymbols aan ID matchen
# load the metadata and rowcount.csv file
setwd("G:/My Drive/RNAseq/Carli_SN+Cytokines/Analysis Carli")
metadata <- read.csv("Metadata.csv", row.names=1)
counts <- read.csv("Rawcounts.csv", row.names=1)
# Filter metadata to include only rows with treatment identifier "IL4IL13 or TGF"
metadata <- metadata %>% filter(Treatment %in% c("CTR", "IL4IL13"))
# Filter metadata to include only rows with Experiment identifier SN21-25
metadata <- metadata %>% filter(Experiment %in% c("B", "C", "D", "E", "F"))
# Extract the row names (these will be the column names in rawcounts)
selected_columns <- rownames(metadata)
# Select the corresponding columns from rawcounts
counts <- counts %>% select(all_of(selected_columns))
# check if order of samples is the same in metadata and count table
rownames(metadata)
colnames(counts)
all(rownames(metadata) == colnames(counts))
# remember that DESeq2 will output results for the last term in the formula
ddsoverall <- DESeqDataSetFromMatrix(countData = counts,
colData = metadata,
design = ~ Experiment + Treatment)
ddsoverall$Treatment <- factor(ddsoverall$Treatment, levels = c("CTR", "IL4IL13"))
keep <- rowSums(counts(ddsoverall)) >= 10
keep <- rowSums(counts(ddsoverall)) >= 10
ddsoverall <- ddsoverall[keep,]
ddsoverall <- DESeq(ddsoverall)
# Generate data table of epithelial data
resoverall <- results(ddsoverall)
resultsNames(ddsoverall)
normalized_counts <- counts(ddsoverall, normalized = TRUE)
log2_normalized_counts <- log2(normalized_counts + 1)  # Adding 1 to avoid log(0)
vsd_overall <- vst(ddsoverall, blind = TRUE)
vsd_mat <- assay(vsd_overall)
vsd_cor <- cor(vsd_mat)
sub_results <- results(ddsoverall, contrast = c("Treatment","CTR", "IL4IL13"),
alpha = 0.5)
#head(sub_results)
sub_results_LFC <- results(ddsoverall,
name = "Treatment_IL4IL13_vs_CTR",
alpha = 0.5)
sub_res_df <- data.frame(sub_results_LFC)
sub_res_sig <- subset(sub_res_df, padj < 0.05) %>%
arrange(padj)
normalized_counts <- counts(ddsoverall, normalized = TRUE) #extracted counts normalized by estimateSIzeFactors()
sig_norm_counts <- normalized_counts[rownames(sub_res_sig),]
#display.brewer.all()
heat.colors <- brewer.pal (n = 6, name = "RdYlBu")
pheatmap(sig_norm_counts,
color = colorRampPalette(c("blue", "white", "red"))(50),
cluster_rows = T,
show_rownames = F,
annotation = select(metadata, Treatment),
scale = "row",
clustering_distance_rows = "euclidean")
# Select top genes based on adjusted p-values
top_genes <- rownames(sub_res_sig)[1:50]  # Get the gene names or rownames
# Extract normalized counts for the top significant genes
top_norm_counts <- normalized_counts[top_genes, ]
# Optionally, log-transform the counts (adding 1 to avoid log of 0)
log_transformed_counts <- log2(top_norm_counts + 1)
# Create a heatmap using pheatmap
pheatmap(log_transformed_counts,
color = colorRampPalette(c("blue", "white", "red"))(50),
scale = "row",  # Scale by row to see relative expression
show_rownames = TRUE,
cluster_rows = TRUE,
annotation = select(metadata, Treatment))  # Add condition metadata
# load the metadata and rowcount.csv file
setwd("G:/My Drive/RNAseq/Carli_SN+Cytokines/Analysis Carli")
metadata <- read.csv("Metadata.csv", row.names=1)
counts <- read.csv("Rawcounts.csv", row.names=1)
# Filter metadata to include only rows with treatment identifier "IL4IL13 or TGF"
metadata <- metadata %>% filter(Treatment %in% c("CTR", "TGF"))
# Filter metadata to include only rows with Experiment identifier SN21-25
metadata <- metadata %>% filter(Experiment %in% c("B", "C", "D", "E", "F"))
# Extract the row names (these will be the column names in rawcounts)
selected_columns <- rownames(metadata)
# Select the corresponding columns from rawcounts
counts <- counts %>% select(all_of(selected_columns))
# remember that DESeq2 will output results for the last term in the formula
ddsoverall <- DESeqDataSetFromMatrix(countData = counts,
colData = metadata,
design = ~ Experiment + Treatment)
ddsoverall$Treatment <- factor(ddsoverall$Treatment, levels = c("CTR", "TGF"))
keep <- rowSums(counts(ddsoverall)) >= 10
ddsoverall <- ddsoverall[keep,]
ddsoverall <- DESeq(ddsoverall)
# Generate data table of epithelial data
resoverall <- results(ddsoverall)
resultsNames(ddsoverall)
normalized_counts <- counts(ddsoverall, normalized = TRUE)
log2_normalized_counts <- log2(normalized_counts + 1)  # Adding 1 to avoid log(0)
vsd_overall <- vst(ddsoverall, blind = TRUE)
vsd_mat <- assay(vsd_overall)
vsd_cor <- cor(vsd_mat)
sub_results <- results(ddsoverall, contrast = c("Treatment","CTR", "TGF"),
alpha = 0.5)
#head(sub_results)
sub_results_LFC <- results(ddsoverall,
name = "Treatment_TGF_vs_CTR",
alpha = 0.5)
sub_res_df <- data.frame(sub_results_LFC)
sub_res_sig <- subset(sub_res_df, padj < 0.05) %>%
arrange(padj)
normalized_counts <- counts(ddsoverall, normalized = TRUE) #extracted counts normalized by estimateSIzeFactors()
sig_norm_counts <- normalized_counts[rownames(sub_res_sig),]
#display.brewer.all()
heat.colors <- brewer.pal (n = 6, name = "RdYlBu")
pheatmap(sig_norm_counts,
color = colorRampPalette(c("blue", "white", "red"))(50),
cluster_rows = T,
show_rownames = F,
annotation = select(metadata, Treatment),
scale = "row",
clustering_distance_rows = "euclidean")
# Select top genes based on adjusted p-values
top_genes <- rownames(sub_res_sig)[1:50]  # Get the gene names or rownames
# Extract normalized counts for the top significant genes
top_norm_counts <- normalized_counts[top_genes, ]
# Optionally, log-transform the counts (adding 1 to avoid log of 0)
log_transformed_counts <- log2(top_norm_counts + 1)
# Create a heatmap using pheatmap
pheatmap(log_transformed_counts,
color = colorRampPalette(c("blue", "white", "red"))(50),
scale = "row",  # Scale by row to see relative expression
show_rownames = TRUE,
cluster_rows = TRUE,
annotation = select(metadata, Treatment))  # Add condition metadata
padj_top50_genes <- head(sub_res_sig, 50)
padj_top50_sig_norm_counts <- merge(normalized_counts, padj_top50_genes, by = 0)
values_padj_top50_sig_norm_counts <- padj_top50_sig_norm_counts[,2:17]
# Set the row names of the dataframe using the "row.names" column
rownames(values_padj_top50_sig_norm_counts) <- padj_top50_sig_norm_counts$Row.names
pheatmap(values_padj_top50_sig_norm_counts,
color = colorRampPalette(c("blue", "white", "red"))(50),
cluster_rows = T,
show_rownames = T,
annotation = select(metadata, Treatment),
scale = "row")
knitr::opts_chunk$set(echo = TRUE)
library(CIBERSORTx)
install.package(CIBERSORTx)
install.packages(CIBERSORTx)
install.packages("CIBERSORTx")
library(CIBERSORTx)
if (!requireNamespace("devtools", quietly = TRUE)) install.packages("devtools")
devtools::install_github("dviraran/xCell")
if (!requireNamespace("devtools", quietly = TRUE)) install.packages("devtools") devtools::install_github("dviraran/xCell")
devtools::install_github("dviraran/xCell")
install.packages("fastmap")
if (!requireNamespace("devtools", quietly = TRUE)) install.packages("devtools")
knitr::opts_chunk$set(echo = TRUE)
library(xCell)
devtools::install_github("dviraran/xCell")
install.packages("fastmap")
install.packages("fastmap")
devtools::install_github("dviraran/xCell")
if (!requireNamespace("devtools", quietly = TRUE)) install.packages("devtools")
install.packages("fastmap", repos = "https://cran.r-project.org")
install.packages("fastmap", repos = "https://cran.r-project.org")
devtools::install_github("dviraran/xCell")
.rs.restartR()
devtools::install_github("dviraran/xCell")
knitr::opts_chunk$set(echo = TRUE)
install.packages("fastmap")
install.packages("fastmap")
devtools::install_github("dviraran/xCell")
detach("package:fastmap", unload = TRUE)
detach("package:fastmap", unload = TRUE)
loadedNamespaces()
detach("package:fastmap", unload = TRUE, character.only = TRUE)
unloadNamespace("fastmap")
detach("package:htmltools", unload = TRUE, character.only = TRUE)
detach("package:htmltools", unload = TRUE, character.only = TRUE)
detach("package:htmltools", character.only = TRUE)
devtools::install_github("dviraran/xCell")
options(unzip = "internal")
devtools::install_github('dviraran/xCell')
install.packages("fastmap")
install.packages("fastmap")
